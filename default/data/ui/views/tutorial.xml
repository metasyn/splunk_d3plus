<dashboard script="rainbow-custom.min.js,tutorial.js,splunk.syntax.js" stylesheet="solarized-dark.css" showsource="false">
  <label>App Information</label>
  <row>
    <panel>
      <html>
        <h1 id="using-d3plus-http-d3plus-org-visualizations">Using <a href=
        "http://d3plus.org/">D3Plus</a> Visualizations</h1>
      
        <p>First things first: download the Splunk 6.x dashboard examples, the Custom Visualizations app. 
        These two apps are crucial, and more or less considered preqrequisites to understanding
        or utilizing this app fully. They aren't literally needed by this app to run, but the knowledge they
        provide is necessary. There are numerous examples of adding custom visualizations 
        into your dashboards. This app can be thought of as an extension to those two apps, specifically to show how
        d3plus is easy to integrate and fun to use.
        </p>
      
        <ul>
          <li>
            <a href="https://splunkbase.splunk.com/app/1603/">Splunk 6.x Dashboard
            Examples</a>
          </li>
      
          <li>
            <a href="https://splunkbase.splunk.com/app/2717/">Custom
            Visualizations</a> - Satoshi has outlined a lot of relevant details in
            the <strong>tutorial</strong> in his app. 
          </li>
        </ul>
      </html>
    </panel>
  </row>
  <row>
    <panel>
      <html>
      
        <h1 id="the-basic-usage">basic usage</h1>
        <ul>
          <li>
          	<p>
              <u><strong>ALL</strong></u>
              of these visualizations require d3 and d3plus. I've concatenated d3plus to the end of d3 so that the file loads faster
              and there is less to keep track of. 
            </p>
          </li>
          <li>
            <p>
              The file is in the <code>appserver/static/components/d3</code>
              folder of this app - you can see or download it 
              <a href="../../static/app/d3plus/components/d3/d3.js">here</a> as well.
            </p>
          </li>
      	  <li>
            <p>Go to examples and look at both the dashboard xml and the javascript
            (bottom of the page). If you like a visualization, you can copy the files
              into your own <code>appserver/static</code>. 
            </p>
          </li>
          <li>
        	<p>After that, you will need two html panels added to your dashboard.</p>
          </li>
        </ul>
        <h2 id="1-the-search-splunk-manager-div">1.) The Search - splunk-manager
        div</h2>
      
        <p>Here&#39;s an example:</p>
        <pre>
      <code data-language="xml">&lt;div id=&quot;custom_viz_search&quot; class=&quot;splunk-manager&quot; data-require=&quot;splunkjs/mvc/searchmanager&quot; data-options=&#39;{
          &quot;search&quot;: &quot;index=foo sourcetype=bar | stats count&quot;,
          &quot;preview&quot;: true
      }&#39;&gt;
&lt;/div&gt;</code>
      </pre>
      
        <p>The trickiest part here is making sure you ESCAPE any XML attributes,
        namely, <code>&#39;&lt;&gt;&quot;\,</code> that might be used in your search.
        Of course quotes come up, but remember angle brackets too (e.g. named field
        extractions). Commas too will break the search.</p>
      
        <h2 id="2-the-view-splunk-view-div">2.) The View - splunk-view div</h2>
      
        <p>Here is an example:</p>
        <pre>
      <code data-language="xml">&lt;div id=&quot;custom_viz&quot; class=&quot;splunk-view&quot; data-require=&quot;app/my_apps_name/path/to/my/needed/javascript&quot; data-options=&#39;{
          &quot;managerid&quot;: &quot;custom_viz_search&quot;,
          &quot;height&quot;: 800,
          &quot;x&quot; : {&quot;value&quot;: &quot;count&quot;, &quot;scale&quot;: &quot;log&quot;},
          &quot;boolean&quot;: true
}&#39;&gt;</code>
      </pre>
      </html>
    </panel>
  </row>
  <row>
    <panel>
      <html>
        <h3>Troubleshooting Tips from Satoshi&#39;s Custom Visualizations app:</h3>
      
        <ul>
          <li>Check that the managerid matches the id of the searchmanager&#39;s
          <code>&lt;div&gt;</code>.</li>
      
          <li>Check for the correct path for data-require for the visualization
          &quot;container&quot; <code>&lt;div&gt;</code>. It should be in the form of
          <code>app/&lt;app_name&gt;/path/to/&lt;js_file_without_extension&gt;</code>.</li>
      
          <li>Check that all XML attributes are properly escaped. For example, make
          sure all <code>&#39;&lt;&gt;&quot;\</code> characters are escaped in the
          search query.</li>
      
          <li>Check that all tokens are wrapped in the token_safe syntax and are
          defined by 2 dollar signs on each side (like <code>$$token$$</code>).</li>
      
          <li>Check that the value of data-options is in valid JS object (not
          necessary JSON since single quotes can be used). In other words, check for
          comma and quote placements.</li>
      
          <li>Check for any JS errors in the browser (via some dev tool).</li>
      
          <li>If all else fail then start with the working examples then modify it in
          small steps to see where it breaks.</li>
        </ul>
      </html>
    </panel>
  </row>
  <row>
    <panel>
      <html>
      
        <h1 id="the-main-idea">the main idea</h1>
      
        <p>Splunk is highly configurable and easily extendible. This app shows how we
        can quite easily extend a Splunk dashboard to use d3plus visualizations. See
        the details in the docs <a href=
        "http://dev.splunk.com/view/webframework-splunkjsstack/SP-CAAAES5">here</a>.</p>
      
        <p>In order to get things working, there are a few steps to creating a
        totally custom visualization. See a small demo / template below. A simplified
        step list might look like:</p>
      
        <ul>
          <li>List dependencies</li>
      
          <li>Specify data options</li>
      
          <li>Create View</li>
      
          <li>Format Data</li>
      
          <li>Update View</li>
        </ul>
        
        Here is a <a href=
        "https://gist.github.com/metasyn/70e5e3599abe76c37a07">sample</a>:
        <pre>
          <code data-language="javascript">
define(function(require, exports, module) {
 // STEP 1.) Initalization of your setup

  // Add your dependenciences here,
  // Note, no .js extension when using require
  // e.g.
  var d3 = require("../d3/d3");
  var d3 = require("../d3plus/d3plus");
  var underscore = require("../underscore");

  var SimpleSplunkView = require("splunkjs/mvc/simplesplunkview");

  // Name your object
  // Replace all "MyVisualization" with whatever you choose.
  var MyVisualization = SimpleSplunkView.extend({
    className: "splunk-toolkit-MyVisualization",

    // STEP 2.) Specify all the options that might need to be pasted to your visualization.

    options: {
      "managerid": null, // required
      "data": "preview", // required

      // Everything below is what you might customize.
      "height": "400",
      "width": "600",
      "boolean": true,
      "x": {
        "value": "count",
        "scale": "linear"
      },
      "x": {
        "value": "count",
        "scale": "linear"
      }
    },
    output_mode: "json", // required

    // the next two functions handle resizes
    initialize: function() {
      SimpleSplunkView.prototype.initialize.apply(this,
        arguments);

      $(window).resize(this, _.debounce(this._handleResize,
        20));
    },
    _handleResize: function(e) {
      // e.data is the this pointer passed to the callback.
      // here it refers to this object and we call render()
      e.data.render();
    },

    // STEP 3.) Creating the Inital View
    // the createView function

    // createView takes no arguments
    // it creates the view we need
    // then returns the visualization as the first
    // arugment (named 'viz') to updateView, below
    createView: function() {

      // this gets rid of the "waiting for data message"
      // and assures us that we have a clean slate
      this.$el.html("");

      // We need to retrieve the data options we specified above.
      // In the example below, we create a container, and set the
      // container's height and width based on the option values.

      // get the height and width from the options
      // and set the div container to that size
      var height = this.settings.get("height");
      var width = this.settings.get("width");
      this.$el.height(height);
      this.$el.width(width);

      // get the div id, adding a # to reference the fact
      // that it is going to be an id when referencedd
      var divId = "#" + this.$el.attr("id");

      // create a container for the viz inside this
      // this, in this case, references the div we have in our dashboard
      $(divId).append('<div id="viz_container"></div>');

      // get the settings, once again from the options above
      var data_values = this.settings.get("x")["value"];
      var boolean = this.settings.get("boolean");

      // this is where we create the actual visualization
      // but we haven't attached the data to it yet
      var visualization = d3plus.viz()
        .container("#viz_container")
        .type("box")
        .id(data_values)
        .tooltip({
          "children": boolean
        })

      return visualization;
    },

    // STEP 4.) Format the data from Splunk
    // the formatData function

    // Making the data look how we want it to for updateView to do its job
    // it becomes the second arugment ('data') for updateView
    formatData: function(data) {

      var boolean = this.settings.get("boolean");
      var y_data = this.settings.get("y");
      var x_data = this.settings.get("x");

      // Here is some custom function, to convert the x and y values to numbers
      // instead of leaving them as strings

      data = _(data).map(function(f) {
        if (parseFloat(f[x_data.value])) {
          f[x_data.value] = parseFloat(f[x_data.value]);
        }
        if (parseFloat(f[y_data.value])) {
          f[y_data.value] = parseFloat(f[y_data.value]);
        }
        return f;
      });

      return data;
    },

    // STEP 5.) Updating the View
    // the updateView function

    // this is the final step
    // where the data actually meets the visualization
    // in this case, our visualization from createView is viz
    // and our data from formatData is data
    updateView: function(viz, data) {

      var y_data = this.settings.get("y");
      var x_data = this.settings.get("x");

      viz
        .dev(true)
        .data(data) // the general data
        .x(x_data)  // the field for x
        .y(y_data)  // the field for y
        .draw();    // finally, done !
    }
  });
            
  return MyVisualization;
});</code>
        </pre>
      </html>
      <html>
        
        <h3>Made by <a href="http://metasyn.pw">Xander</a> - xander@splunk.com</h3>
      </html>
    </panel>
  </row>
</dashboard>